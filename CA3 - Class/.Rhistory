install.packages(car)
install.packages(car)
install.packages(car)
library(car)
scatter.smooth(x = cars$speed, y = cars$dist, main = "Dist ~ Speed")
library(cars)
install.packages("e1071")
library(e1071)
#divide graph area in 2 columns
par(mfrwo = c(1, 2))
par(mfrow = c(1, 2))
#density plot for speed
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency", sub = past("Skewness:", round(e1071::skweness(cars$speed), 2)))
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency", sub = past("Skewness:", round(e1071::skeweness(cars$speed), 2))) # sub = subtitle
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency", sub = paste("Skewness:", round(e1071::skeweness(cars$speed), 2))) # sub = subtitle
library(e1071)
#divide graph area in 2 columns
par(mfrow = c(1, 2))
#density plot for speed
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency", sub = paste("Skewness:", round(e1071::skeweness(cars$speed), 2))) # sub = subtitle
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency", sub = paste("Skewness:", round(e1071::skewness(cars$speed), 2))) # sub = subtitle
ploygon(density(cars$speed), col = "red")
plot(density(cars$speed), main = "Density Plot: Speed", ylab = "Frequency", sub = paste("Skewness:", round(e1071::skewness(cars$speed), 2))) # sub = subtitle
polygon(density(cars$speed), col = "red")
plot(density(cars$dist), main = "Density Plot: Distance", ylab = "Frequency", sub = paste("Skewness:", round(e1071::skewness(cars$dist), 2))) # sub = subtitle
polygon(density(cars$dist), col = "red")
cor(cars$speed, cars$dist)
linearMod <- lm(dist ~ speed, data = cars)
print(linearMod)
summary(linearMod)
AIC(linearMod)
BIC(linearMod)
#sample chooses a random sample
#from 1:all records from cards, 80% of rows
no_of_records <- sample(1:nrow(cars), 0.8 * nrow(cars))
#model training data
training_data <- cars[no_of_records,] #80%
#test data
testing_data <- cars[-no_of_records] #20% or whatever is left of the dataset
testing_data <- cars[-no_of_records] #20% or whatever is left of the dataset
no_of_records <- sample(1:nrow(cars), 0.8 * nrow(cars))
#model training data
training_data <- cars[no_of_records, ] #80%
#test data
testing_data <- cars[-no_of_records, ] #20% or whatever is left of the dataset
lr_model <- lm(dist ~ speed, data = training_data)
#predict distance from testing data
dist_predicted <- predict(lr_model, testing_data)
summary(lr_model)
actuals_preds <- data.frame(cbind(actuals = testing_data$dist, predicted = dist_predicted))
head(actuals_preds)
#Calculate correlation accuracy
correlation_accuracy <- cor(actuals_preds)
correclation_accuracy
correlation_accuracy
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
#MAPE
mape <- mean(abs((actuals_preds$predicted - actuals_preds$actuals)) / actuals_preds$actuals)
mape
ts_data <- EuStockMarkets[, 1]
opar <- par()
par(mfrow = c(1, 2))
# use type = "additive for additive components"
decomposed_result <- decompose(ts_data, type = "mult")
plot(decomposed_result)
decomposed_result <- decompose(ts_data, type = "additive")
plot(decomposed_result)
seasonal_trend_error <- stl(ts_data, s.window = "periodic")
par <- opar
#Examine first few rows of time series
stlRes$time.series
seasonal_trend_error$time.series
lagged_ts <- lag(ts-data, 3)
lagged_ts <- lag(ts_data, 3)
install.packages("DataCombine")
library(DataCombine)
#Create a data frame with 1 lag and 1 lead value
my_dataframe <- as.data.frame(ts_data)
#create lag1 variable
my_dataframe <- slide(my_dataframe, "x", NewVar = "xLag1", slideBy = -1)
# create lead1 variable
my_dataframe <- slide(my_dataframe, "x", NewVar = "xLead1", slideBy = 1)
head(my_dataframe)
acf_res <- acf(AirPassengers) # autocorrelation
pacf_res <- pacf(AirPassengers)
plot(JohnsonJohnson)
trained_model <- lm(JohnsonJohnson ~ c(1:length(JohnsonJohnson)))
# resid(trained_model) contains the de-trended series.
plot(resid(trained_model), type = "1")
plot(resid(trained_model), type = "1")
plot(resid(trained_model), type = "l")
plot(JohnsonJohnson)
trained_model <- lm(JohnsonJohnson ~ c(l:length(JohnsonJohnson)))
# resid(trained_model) contains the de-trended series.
plot(resid(trained_model), type = "l")
install.packages("forcast")
install.packages("forecast")
library(forecast)
#decompose the time series
#either the character string "periodic" or the span (in lags)
#of the loess window for seasonal extraction is entered in function
? stl
ts_decompose <- stl(AirPassengers, "periodic")
#de-seasonalise the time series
ts_seasonal_adjust <- seasadj(ts_decompose)
#original series
plot(AirPassengers, type "l")
plot(AirPassengers,type "l")
plot(AirPassengers, type "l")
ts_decompose <- stl(AirPassengers, "periodic")
#de-seasonalise the time series
ts_seasonal_adjust <- seasadj(ts_decompose)
#original series
plot(AirPassengers, type "l")
plot(ts_seasonal_adjust, type = "l")
plot(AirPassengers, type "l")
plot(AirPassengers, type = "l")
#seasonal adjusted
plot(ts_seasonal_adjust, type = "l")
plot(ts_seasonal_adjust, type = "l")
libary(tseries)
adf.test(ts_data)
install.packages(tseries)
library(tseries)
adf.test(ts_data)
? kpss.testkpss.test(ts_data)
kpss.testkpss.test(ts_data)
testkpss.test(ts_data)
kpss.test(ts_data)
adf.test(ts_data)
?kpss.test
kpss.test(ts_data)
nsdiffs(AirPassengers)
AirPassengers_sasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1)
plot(AirPassengers_seadiff, type = "l", main = "Seasonally Differenced")
plot(AirPassengers_seasdiff, type = "l", main = "Seasonally Differenced")
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1)
plot(AirPassengers_seasdiff, type = "l", main = "Seasonally Differenced")
adf.test(AirPassengers_seasdiff)
kpss.test(AirPassengers_seasdiff)
nsdiffs(AirPassengers_seasdiff)
library(forecast)
library(tseries)
plot(Nile)
ndiffs(Nile)
d_nile <- diff(Nile)
plot(d_nile)
nidiffs(d_nile)
ndiffs(d_nile)
adf.test(d_nile)
Acf(d_nile)
Acf(d_nile)
Pacf(d_nile)
fit <- Arima(Nile, order = c(0, 1, 1))
fit
accuracy(fit)
qqnorm(fit$residuals)
qqline(fit$residuals)
Box.test(fit$residuals, type = "Ljung-Box")
forecast(fit, 3)
plot(fit)
forecast(plot(fit, 3)) # lo 80 = lo 80% Confidence
fit <- auto.arima(Nile)
fit
